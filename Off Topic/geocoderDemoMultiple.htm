<!DOCTYPE html>
<html lang="de">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>OSM geolocation Demo</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS"
        crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.4.0/leaflet.css" integrity="sha256-YR4HrDE479EpYZgeTkQfgVJq08+277UXxMLbi/YP69o="
        crossorigin="anonymous" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.2/knockout-min.js" integrity="sha256-owX7sroiO/O1a7h3a4X29A1g3QgqdNvijRQ7V5TH45M="
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.4.0/leaflet.js" integrity="sha256-6BZRSENq3kxI4YYBDqJ23xg0r1GwTHEpvp3okdaIqBw="
        crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
        crossorigin="anonymous"></script>
    <style type="text/css">
        html,
        body {
            width: 100%;
            height: 100%;
        }

        td {
            vertical-align: top;
        }

        p {
            margin-top: 0em;
            margin-bottom: 1em;
        }

        #map {
            height: 100%;
            width: 100%;
        }

        .addresstable td {
            font-size: 80%;
        }

        .mapselector {
            position: absolute;
            z-index: 1100;
            left: 75px;
            top: 10px;
        }
    </style>
</head>

<body>
    <div class=".container-fluid h-100">
        <div class="row h-100">
            <div class="col-4 col-xl-3">
                <div class="p-2">Gib die zu suchenden Adressen (1 pro Zeile) ein:</div>
                <div class="d-flex p-2">
                    <div class="pr-2">Land:</div>
                    <div class="flex-grow-1">
                        <input tye="text" id="country" class="form-control form-control-sm" data-bind="value: country"></input>
                    </div>
                </div>
                <div class="d-flex p-2 h-25">
                    <textarea data-bind="value: address" class="form-control form-control-sm"></textarea>
                </div>
                <div class="p-2">
                    <p data-bind="text: state"></p>
                    <table data-bind="visible: locations().length > 0" class="table table-striped table-sm addresstable">
                        <thead>
                            <tr>
                                <th>IDX</th>
                                <th>Adresse</th>
                                <th>Lat</th>
                                <th>Lon</th>
                            </tr>
                        </thead>
                        <tbody data-bind="foreach: locations">
                            <tr>
                                <td data-bind="text: idx"></td>
                                <td data-bind="text: address"></td>
                                <td data-bind="text: lat"></td>
                                <td data-bind="text: lon"></td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="small">
                        <p><strong>Tipps für die Adressensuche</strong></p>
                        <p>Es wird der <a href="https://wiki.openstreetmap.org/wiki/Nominatim">Nominatim Geocoder</a> auf Basis von OSM Daten verwendet. Allerdings müssen die
                            Anfragen exakter als bei Google Geocoding sein. Wenn z. B. die Gemeinde nicht genau passt, wird
                            kein Eintrag gefunden.</p>
                        <ul>
                            <li>Das Land wird - wenn angegeben - an die Adresse angehängt. Lösche das Land, wenn das nicht
                                gemacht werden soll.
                            </li>
                            <li>Gib nur die Postleitzahl und nicht den Ort ein. Wenn der in OSM gespeicherte Ort
                                die Katastralgemeinde ist, wird sie unter der Gemeinde nicht gefunden.
                            </li>
                            <li>Schreibe Straße und Gasse aus, also Spengergasse statt Spengerg.</li>
                            <li>Verwende auch sonst keine Abkürzungen (also der statt d.)</li>
                            <li>Vermeide die Angabe von Stiege und Türnummer, also Musterstraße 1 statt Musterstraße
                                1/2/12.</li>
                        </ul>
                    </div>
                    <sup>&copy; Michael Schletz 2019</sup>
                </div>
            </div>
            <div class="col-8 col-xl-9">
                <select class="mapselector" data-bind="options: availableMaps, value: selectedMap"></select>
                <div id="map"></div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        class AppViewModel {
            constructor() {
                this.address = ko.observable("");          // Eingabefeld für die Adresse.
                this.locations = ko.observableArray([]);     // Die gefundenen Orte.
                this.state = ko.observable("");            // Lade- und Fehlermeldungen.
                this.queue = [];                           // Array mit den abzuarbeitenden Adressen.
                this.markers = null;                       // Featuregroup mit den Markern.
                this.country = ko.observable("Österreich");

                // Verschiedene Leaflet Layer von Kartenanbietern. 
                // Basemap ist die offizielle Verwaltungskarte Österreichs. 
                this.layers = {
                    "Basemap": L.tileLayer('https://maps1.wien.gv.at/basemap/bmaphidpi/normal/google3857/{z}/{y}/{x}.jpeg', { maxZoom: 19 }),
                    "Openstreetmap": L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 19 }),
                    "Mapy Streetmap": L.tileLayer('https://mapserver.mapy.cz/turist-m/{z}-{x}-{y}', { maxZoom: 18 }),
                    "Luftbild (Google)": L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
                        maxZoom: 20,
                        subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
                    })
                };

                // Für das Dropdownfeld der Kartenauswahl.
                this.availableMaps = ko.observableArray(Object.keys(this.layers));
                // Der key der aktuell ausgewählte Karte, wird über das Dropdownfeld gesetzt.
                this.selectedMap = ko.observable();

                // Die Karte auf Ostösterreich zoomen.
                this.map = new L.Map("map", { zoomControl: true }).setView([48, 16], 10);

                // Code, der ausgeführt wird, wenn sich die Adresse oder das Land ändert.
                this.address.subscribe(item => this.initSearch());
                this.country.subscribe(item => this.initSearch());

                // Code, der ausgeführt wird, wenn sich die Grundkarte ändert.
                this.selectedMap.subscribe(item => this.switchMap(item));

                // Basemap (die 1. Karte) als Standard Kartenoverlay verwenden.
                this.selectedMap(this.availableMaps()[0]);
            }

            /**
            * Löscht alle Marker von map, indem es die Featuregroup markers entfernt.
            * @param {string} mapKey Key in der layers Auflistung.
            */
            clearMarkers() {
                if (this.markers) { this.markers.remove(); }
                this.markers = L.featureGroup().addTo(this.map);
                this.locations.removeAll();
            }
            /**
            * Wechselt die Grundkarte
            * @param {string} mapKey Key in der layers Auflistung.
            */
            switchMap(mapKey) {
                if (this.activeLayer) { this.activeLayer.remove(); }
                this.activeLayer = this.layers[mapKey];
                this.activeLayer.addTo(this.map);
            }

            /**
            * Startet die Suche für die eingegebenen Adressen.
            */
            initSearch() {
                let idx = 0;
                this.clearMarkers();
                this.queue = this.address().split('\n').filter(item => item).map(item => ({ val: item, idx: idx++ }));
                this.dequeueSearch(4);
            }
            /**
            * Startet die Suche für eine gewisse Anzahl von Adressen aus queue.
            * @param {number} count Anzahl der zu startenden Suchvorgänge.
            */
            dequeueSearch(count) {
                count = Math.min(this.queue.length, count || 3);
                while (count-- != 0) {
                    const address = this.queue.shift();
                    this.state(this.queue.length + " not processed.");
                    if (address.val) { this.getLocation(address); }
                }
            }

            /**
            * Sucht nach einer Adresse in der OSM API, positioniert den Marker in der Map und fügt
            * das Ergebnis der location Auflistung hinzu.
            * @param {object} address Adressobjekt mit dem Aufbau {val: string, idx: number}
            */
            getLocation(address) {
                // Hängt das Land mit Beistrich an. Eine Mischung aus den Parametern q und country
                // funktioniert nicht.
                const querystr = address.val + (this.country() ? (", " + this.country()) : "");
                $.getJSON("https://nominatim.openstreetmap.org/search", { q: querystr, format: "json" })
                    .done((data) => {
                        try {
                            if (data && data.length > 0) {
                                this.locations.push({ idx: address.idx, address: address.val, lat: data[0].lat, lon: data[0].lon });
                                const marker = L.marker([data[0].lat, data[0].lon]).addTo(this.markers);
                                marker.bindPopup("<strong>" + address.idx + "</strong> " + address.val);
                                marker.rawData = data[0];
                                marker.on('click', (e) => console.log(e.target.rawData, this));
                                this.map.fitBounds(this.markers.getBounds());
                            }
                            else {
                                this.locations.push({ idx: address.idx, address: address.val, lat: "?", lon: "?" });
                            }
                            this.locations.sort((left, right) => left.idx == right.idx ? 0 : left.idx < right.idx ? -1 : 1);
                        }
                        finally {
                            this.dequeueSearch(1);
                        }
                    })
                    .fail((e) => {
                        this.state("Request failed. " + JSON.stringify(e));
                        this.dequeueSearch(1);
                    });
            };
        };

        ko.applyBindings(new AppViewModel());
    </script>
</body>

</html>